= render 'shared/header'
section.ftco-section.ftco-cart
  .container
    .row
      .col-md-12.ftco-animate
        .cart-list
          table.table
            thead.thead-primary
              tr.text-center
                th &nbsp;
                th &nbsp;
                th Product
                th Price
                th Quantity
                th Total
            tbody
              - @cart_items.each do |cart|
                tr.text-center
                  td.product-remove 
                    a  onclick="setupCartRemove(#{cart.id})"
                      span.icon-close
                  
                  td.image-prod
                    .img style="background-image: url(#{url_for(cart.product.display_image_url)});"
                  
                  td.product-name
                    h3 
                      = cart.product.title
                  
                  td.price 
                    - formatted_price = number_with_precision(cart.product.price, precision: 0, delimiter: '.', separator: ',')
                    | Rp. 
                    = formatted_price
                  
                  td.quantity
                    .input-group.mb-3
                      input.quantity.form-control.input-number type="text" name="quantity" value="#{cart.quantity}" min="1" max="100" data-cart-id="#{cart.id}"
                  
                  td.total 
                    - total_price = cart.product.price * cart.quantity
                    - formatted_total_price = number_with_precision(total_price, precision: 0, delimiter: '.', separator: ',')
                    | Rp. 
                    = formatted_total_price
    .row.justify-content-end
      .col.col-lg-12.col-md-6.mt-5.cart-wrap.ftco-animate
        .cart-total.mb-3
          h3 Totals
          p.d-flex
            span Subtotal
            span 
              - formatted_total = number_with_precision(@total_price, precision: 0, delimiter: '.', separator: ',')
              | Rp. 
              = formatted_total
          p.d-flex
            span Discount
            span 0
          hr
          p.d-flex.total-price
            span Total
            span 
              - formatted_total = number_with_precision(@total_price, precision: 0, delimiter: '.', separator: ',')
              | Rp. 
              = formatted_total
    = form_with url: checkout_carts_path, method: :post, local: false, id: 'checkout-form' do |f| 
      .row 
        .col-md-12.ftco-animate
          .billing-form.p-3.p-md-5
            h3.mb-4.billing-heading Billing Details
            .row.align-items-end
              .col-md-12
                .form-group
                  label for="customer_name" Nama Pemesan *
                  = f.text_field :customer_name, id: 'nama-pemesan', class: 'form-control', placeholder: '', required: true, style: 'text-align: left;'
              .w-100
              .col-md-12
                .form-group
                  label for="customer_address" Alamat Lengkap *
                  = f.text_area :customer_address, id: 'alamat', class: 'form-control', rows: 3, required: true, style: 'text-align: left;'
              .w-100
              .col-md-12
                .form-group
                  label for="customer_phone" Phone *
                  = f.text_field :customer_phone, id: 'phone', class: 'form-control', placeholder: '', required: true, style: 'text-align: left;'
              
              = f.hidden_field :total_price, id: 'hidden-total-price', value: @total_price
              
              .col-md-12 style="color:white;"
                button.btn.btn-primary.py-3.px-4#checkout-btn type="button" style="width: 100%; color: white !important;" onclick="sendToWhatsApp();"
                  | Proceed to Checkout
    
= render 'shared/footer'

javascript: 
  function checkCartItems() {
    const cartItems = document.querySelectorAll('.product-remove');
    return cartItems.length > 0;
  }
  function validateCheckoutForm() {
    const namaPemesan = document.getElementById('nama-pemesan');
    const alamat = document.getElementById('alamat');
    const phone = document.getElementById('phone');
    const checkoutBtn = document.getElementById('checkout-btn');
    
    // Check jika semua field terisi
    const allFilled = namaPemesan.value.trim() !== '' && 
                      alamat.value.trim() !== '' && 
                      phone.value.trim() !== '';
    
    // Enable/disable button
    if (allFilled) {
      checkoutBtn.classList.remove('disabled');
      checkoutBtn.style.opacity = '1';
      checkoutBtn.style.cursor = 'pointer';
    } else {
      checkoutBtn.classList.add('disabled');
      checkoutBtn.style.opacity = '0.5';
      checkoutBtn.style.cursor = 'not-allowed';
    }
  }
  
  function sendToWhatsApp() {
    if (!checkCartItems()) {
      alert('Keranjang belanja Anda kosong. Silakan tambahkan produk terlebih dahulu.');
      return false;
    }
    
    const namaPemesan = document.getElementById('nama-pemesan').value || '';
    const alamat = document.getElementById('alamat').value || '';
    const phone = document.getElementById('phone').value || '';
    
    if (!namaPemesan.trim()) {
      alert('Mohon isi Nama Pemesan');
      return false;
    }
    
    if (!alamat.trim()) {
      alert('Mohon isi Alamat Lengkap');
      return false;
    }
    
    if (!phone.trim()) {
      alert('Mohon isi Nomor Telepon');
      return false;
    }
    
    // Submit form dulu untuk save order
    const form = document.getElementById('checkout-form');
    const formData = new FormData(form);
    
    fetch(form.action, {
      method: 'POST',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      }
    }).then(response => {
      // Setelah order tersimpan, kirim ke WhatsApp
      let pesanan = [];
      const rows = document.querySelectorAll('tbody tr');
      
      rows.forEach(row => {
        const productName = row.querySelector('.product-name h3').textContent.trim();
        const quantity = row.querySelector('input.quantity').value;
        const price = row.querySelector('.price').textContent.trim();
        
        pesanan.push(`${quantity}x ${productName} - ${price}`);
      });
      
      const totalPrice = document.querySelector('.total-price span:last-child').textContent.trim();
      
      const today = new Date();
      const tanggal = today.toLocaleDateString('id-ID', { 
        day: 'numeric', 
        month: 'long', 
        year: 'numeric' 
      });
      
      let message = `Halo! Saya ingin memesan kopi:\n\n`;
      message += `*Pesanan:*\n`;
      message += pesanan.join('\n') + '\n\n';
      message += `*Tanggal Pemesan:* ${tanggal}\n\n`;
      message += `*Alamat Pengiriman:*\n${alamat}\n\n`;
      message += `*Data Pemesan:*\n`;
      message += `Nama Pemesan: ${namaPemesan}\n`;
      message += `No Telp: ${phone}\n\n`;
      message += `*Total: ${totalPrice}*\n\n`;
      message += `Terima kasih! 🙏`;
      
      const encodedMessage = encodeURIComponent(message);
      const whatsappNumber = '6287876550009';
      const whatsappURL = `https://wa.me/${whatsappNumber}?text=${encodedMessage}`;
      
      window.open(whatsappURL, '_blank');
      
      // Redirect ke halaman success atau home
      setTimeout(() => {
        window.location.href = '/';
      }, 1000);
    });
    
    return false;
  }

  function setupCartRemove(value) {
    // Cari elemen parent terdekat yang merupakan <tr> (table row)
    const row = event.target.closest('tr');
    
    if (row) {
      // Tambahkan animasi fade out sebelum menghapus (opsional)
      row.style.transition = 'opacity 0.3s ease';
      row.style.opacity = '0';
      
      // Hapus elemen setelah animasi selesai
      setTimeout(() => {
        row.remove();
        updateCartTotals();
        validateCheckoutForm();
        if (value) {
          fetch(`/carts/${value}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
            },
            body: JSON.stringify({ id: value })
          });
        }
      }, 300);
    }
  }
   
  // Fungsi untuk format angka ke format Rupiah
  function formatRupiah(number) {
    return new Intl.NumberFormat('id-ID').format(number);
  }

  // Fungsi untuk parse harga dari format Rupiah ke number
  function parseRupiah(text) {
    return parseInt(text.replace(/[^\d]/g, '')) || 0;
  }

  // Update total per item ketika quantity berubah
  function updateItemTotal(input) {
    const row = input.closest('tr');
    const priceText = row.querySelector('.price').textContent;
    const price = parseRupiah(priceText);
    const quantity = parseInt(input.value) || 1;
    
    // Validasi quantity
    if (quantity < 1) {
      input.value = 1;
      return;
    }
    if (quantity > 100) {
      input.value = 100;
      return;
    }
    
    // Update total untuk item ini
    const total = price * quantity;
    const totalCell = row.querySelector('.total');
    totalCell.textContent = 'Rp. ' + formatRupiah(total);
    
    const cartId = input.dataset.cartId;
    if (cartId) {
      fetch(`/carts/${cartId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
        },
        body: JSON.stringify({ quantity: quantity })
      });
    }
    // Update grand total
    updateCartTotals();
  }

  // Update subtotal dan total keseluruhan
  function updateCartTotals() {
    const allTotals = document.querySelectorAll('tbody .total');
    let grandTotal = 0;
    
    allTotals.forEach(totalCell => {
      const itemTotal = parseRupiah(totalCell.textContent);
      grandTotal += itemTotal;
    });
    
    // Update subtotal dan total di cart summary
    const subtotalSpans = document.querySelectorAll('.cart-total .d-flex span:last-child');
    if (subtotalSpans.length >= 1) {
      subtotalSpans[0].textContent = 'Rp. ' + formatRupiah(grandTotal);
    }
    if (subtotalSpans.length >= 3) {
      subtotalSpans[2].textContent = 'Rp. ' + formatRupiah(grandTotal);
    }
  }

  // Setup event listeners
  document.addEventListener('DOMContentLoaded', function() {
    // Event listener untuk semua input quantity
    const quantityInputs = document.querySelectorAll('input.quantity');

    const namaPemesan = document.getElementById('nama-pemesan');
    const alamat = document.getElementById('alamat');
    const phone = document.getElementById('phone');
    
    // Set button disabled pada awal load
    validateCheckoutForm();
    
    // Add event listener untuk setiap input
    if (namaPemesan) {
      namaPemesan.addEventListener('input', validateCheckoutForm);
    }
    if (alamat) {
      alamat.addEventListener('input', validateCheckoutForm);
    }
    if (phone) {
      phone.addEventListener('input', validateCheckoutForm);
    }
    
    quantityInputs.forEach(input => {
      // Event saat nilai berubah
      input.addEventListener('change', function() {
        updateItemTotal(this);
      });
      
      // Event saat mengetik (real-time update)
      input.addEventListener('input', function() {
        updateItemTotal(this);
      });
    });
  });

